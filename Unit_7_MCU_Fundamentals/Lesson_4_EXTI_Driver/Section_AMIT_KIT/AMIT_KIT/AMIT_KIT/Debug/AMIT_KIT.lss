
AMIT_KIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000672  00000706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800070  00800070  00000716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001126  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b4  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c5  00000000  00000000  00002226  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057e  00000000  00000000  00002d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000775  00000000  00000000  000032e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003a57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	8c 01       	movw	r16, r24
  56:	bd 01       	movw	r22, r26
  58:	ee 01       	movw	r28, r28
  5a:	1f 02       	muls	r17, r31
  5c:	50 02       	muls	r21, r16
  5e:	81 02       	muls	r24, r17
  60:	b2 02       	muls	r27, r18
  62:	e3 02       	muls	r30, r19
  64:	14 03       	mulsu	r17, r20

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e2 e7       	ldi	r30, 0x72	; 114
  7a:	f6 e0       	ldi	r31, 0x06	; 6
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	a0 37       	cpi	r26, 0x70	; 112
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	a0 e7       	ldi	r26, 0x70	; 112
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a4 37       	cpi	r26, 0x74	; 116
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 18 01 	call	0x230	; 0x230 <main>
  9c:	0c 94 37 03 	jmp	0x66e	; 0x66e <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <LCD_KICK>:
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
}

void LCD_KICK(void)
{
	LCD_CTRL &= ~(1<<E_PIN);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	83 ed       	ldi	r24, 0xD3	; 211
  ac:	90 e3       	ldi	r25, 0x30	; 48
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_KICK+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCD_KICK+0x10>
  b4:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL |=(1<<E_PIN);
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	08 95       	ret

000000be <LCD_WRITE_CHAR>:
	LCD_CTRL &= ~ ((1<<RW_PIN)|(1<<RS_PIN));
	LCD_KICK();
	#endif
}
void LCD_WRITE_CHAR(unsigned char data)
{
  be:	cf 93       	push	r28
  c0:	c8 2f       	mov	r28, r24
	LCD_CTRL &= ~(1<<RW_PIN); 
	LCD_KICK();
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0);
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	9c 2f       	mov	r25, r28
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	89 2b       	or	r24, r25
  cc:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= (1<<RS_PIN); 
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RW_PIN); 
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  da:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (data << 4);
  de:	2b b3       	in	r18, 0x1b	; 27
  e0:	30 e1       	ldi	r19, 0x10	; 16
  e2:	c3 9f       	mul	r28, r19
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	92 2f       	mov	r25, r18
  ea:	9f 70       	andi	r25, 0x0F	; 15
  ec:	89 2b       	or	r24, r25
  ee:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= (1<<RS_PIN); 
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RW_PIN); 
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	8b 7f       	andi	r24, 0xFB	; 251
  fa:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  fc:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_KICK>
	#endif
}
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LCD_ISBUSY>:
	LCD_CTRL |=(1<<E_PIN);
}

void LCD_ISBUSY(void)
{
	DataDir_LCD_PORT = 0x00; 
 104:	1a ba       	out	0x1a, r1	; 26
	LCD_CTRL |= (1<<RW_PIN); 
 106:	88 b3       	in	r24, 0x18	; 24
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RS_PIN);
 10c:	88 b3       	in	r24, 0x18	; 24
 10e:	8d 7f       	andi	r24, 0xFD	; 253
 110:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 112:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_KICK>
	DataDir_LCD_PORT = 0xFF;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1<<RW_PIN);
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret

00000122 <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
	
}

void LCD_WRITE_COMMAND(unsigned char command)
{
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
	LCD_CTRL &= ~(1<<RW_PIN)|(1<<RS_PIN); 
	LCD_KICK();
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_ISBUSY();
 126:	0e 94 82 00 	call	0x104	; 0x104 <LCD_ISBUSY>
	LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	9c 2f       	mov	r25, r28
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	89 2b       	or	r24, r25
 134:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL &= ~ ((1<<RW_PIN)|(1<<RS_PIN));
 136:	88 b3       	in	r24, 0x18	; 24
 138:	89 7f       	andi	r24, 0xF9	; 249
 13a:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 13c:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
 140:	2b b3       	in	r18, 0x1b	; 27
 142:	30 e1       	ldi	r19, 0x10	; 16
 144:	c3 9f       	mul	r28, r19
 146:	c0 01       	movw	r24, r0
 148:	11 24       	eor	r1, r1
 14a:	92 2f       	mov	r25, r18
 14c:	9f 70       	andi	r25, 0x0F	; 15
 14e:	89 2b       	or	r24, r25
 150:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL &= ~ ((1<<RW_PIN)|(1<<RS_PIN));
 152:	88 b3       	in	r24, 0x18	; 24
 154:	89 7f       	andi	r24, 0xF9	; 249
 156:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 158:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_KICK>
	#endif
}
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <LCD_CLEAR_SCREEN>:
	}
}

void LCD_CLEAR_SCREEN(void)
{
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 91 00 	call	0x122	; 0x122 <LCD_WRITE_COMMAND>
 166:	08 95       	ret

00000168 <LCD_INIT>:
 168:	87 e8       	ldi	r24, 0x87	; 135
 16a:	93 e1       	ldi	r25, 0x13	; 19
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_INIT+0x4>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_INIT+0xa>
 172:	00 00       	nop
#include "lcd.h"

void LCD_INIT(void)
{
	_delay_ms(20);
	LCD_ISBUSY();
 174:	0e 94 82 00 	call	0x104	; 0x104 <LCD_ISBUSY>
	DataDir_LCD_CTRL |= ((1<<E_PIN)|(1<<RW_PIN)|(1<<RS_PIN)); 
 178:	87 b3       	in	r24, 0x17	; 23
 17a:	8e 60       	ori	r24, 0x0E	; 14
 17c:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~((1<<E_PIN)|(1<<RW_PIN)|(1<<RS_PIN)); 
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	81 7f       	andi	r24, 0xF1	; 241
 182:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF; 
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	8a bb       	out	0x1a, r24	; 26
 188:	85 ea       	ldi	r24, 0xA5	; 165
 18a:	9e e0       	ldi	r25, 0x0E	; 14
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_INIT+0x24>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_INIT+0x2a>
 192:	00 00       	nop
	_delay_ms(15);
	LCD_CLEAR_SCREEN();
 194:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_CLEAR_SCREEN>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_8BIT_2LINES);
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02); 
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 91 00 	call	0x122	; 0x122 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_4BIT_2LINES);
 19e:	88 e2       	ldi	r24, 0x28	; 40
 1a0:	0e 94 91 00 	call	0x122	; 0x122 <LCD_WRITE_COMMAND>
	#endif
	
	LCD_WRITE_COMMAND(LCD_CMD_ENTRY_MODE);
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	0e 94 91 00 	call	0x122	; 0x122 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	0e 94 91 00 	call	0x122	; 0x122 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
 1b0:	8f e0       	ldi	r24, 0x0F	; 15
 1b2:	0e 94 91 00 	call	0x122	; 0x122 <LCD_WRITE_COMMAND>
 1b6:	08 95       	ret

000001b8 <LCD_GOTOXY>:
	LCD_CTRL &= ~(1<<RW_PIN);
}

void LCD_GOTOXY(unsigned char line, unsigned char position)
{
	if (line == 0)
 1b8:	81 11       	cpse	r24, r1
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <LCD_GOTOXY+0x12>
	{
		if (position < 16 && position >= 0)
 1bc:	60 31       	cpi	r22, 0x10	; 16
 1be:	68 f4       	brcc	.+26     	; 0x1da <LCD_GOTOXY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW + position);
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	86 0f       	add	r24, r22
 1c4:	0e 94 91 00 	call	0x122	; 0x122 <LCD_WRITE_COMMAND>
 1c8:	08 95       	ret
		}
	}
	else if (line == 1)
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	31 f4       	brne	.+12     	; 0x1da <LCD_GOTOXY+0x22>
	{
		if (position < 16 && position >= 0)
 1ce:	60 31       	cpi	r22, 0x10	; 16
 1d0:	20 f4       	brcc	.+8      	; 0x1da <LCD_GOTOXY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_SECOND_ROW + position);
 1d2:	80 ec       	ldi	r24, 0xC0	; 192
 1d4:	86 0f       	add	r24, r22
 1d6:	0e 94 91 00 	call	0x122	; 0x122 <LCD_WRITE_COMMAND>
 1da:	08 95       	ret

000001dc <LCD_WRITE_STRING>:
	LCD_KICK();
	#endif
}

void LCD_WRITE_STRING(char* data)
{
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	8c 01       	movw	r16, r24
	int count = 0; 
 1e6:	c0 e0       	ldi	r28, 0x00	; 0
 1e8:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (*data > 0)
 1ea:	19 c0       	rjmp	.+50     	; 0x21e <LCD_WRITE_STRING+0x42>
	{
		count++;
 1ec:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*data++);
 1ee:	0f 5f       	subi	r16, 0xFF	; 255
 1f0:	1f 4f       	sbci	r17, 0xFF	; 255
 1f2:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_CHAR>
		if (count == 16) 
 1f6:	c0 31       	cpi	r28, 0x10	; 16
 1f8:	d1 05       	cpc	r29, r1
 1fa:	29 f4       	brne	.+10     	; 0x206 <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTOXY(1,0); 
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_GOTOXY>
 204:	0c c0       	rjmp	.+24     	; 0x21e <LCD_WRITE_STRING+0x42>
		}
		else if (count == 32 || count == 33) 
 206:	ce 01       	movw	r24, r28
 208:	80 97       	sbiw	r24, 0x20	; 32
 20a:	02 97       	sbiw	r24, 0x02	; 2
 20c:	40 f4       	brcc	.+16     	; 0x21e <LCD_WRITE_STRING+0x42>
		{
			LCD_CLEAR_SCREEN();
 20e:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_CLEAR_SCREEN>
			LCD_GOTOXY(0,0); 
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_GOTOXY>
			count = 0;
 21a:	c0 e0       	ldi	r28, 0x00	; 0
 21c:	d0 e0       	ldi	r29, 0x00	; 0

void LCD_WRITE_STRING(char* data)
{
	int count = 0; 
	
	while (*data > 0)
 21e:	f8 01       	movw	r30, r16
 220:	80 81       	ld	r24, Z
 222:	81 11       	cpse	r24, r1
 224:	e3 cf       	rjmp	.-58     	; 0x1ec <LCD_WRITE_STRING+0x10>
			LCD_CLEAR_SCREEN();
			LCD_GOTOXY(0,0); 
			count = 0;
		}
	}
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <main>:
    * LCD_D6 -> PORTA.6
    * LCD_D7 -> PORTA.7 
	*/
	
	
	PinConfig_A->GPIO_PinNumber = GPIO_PIN_4;
 230:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PinConfig_A>
 234:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PinConfig_A+0x1>
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	80 83       	st	Z, r24
	PinConfig_A->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 23c:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PinConfig_A>
 240:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PinConfig_A+0x1>
 244:	c2 e0       	ldi	r28, 0x02	; 2
 246:	c1 83       	std	Z+1, r28	; 0x01
	
	PinConfig_A->GPIO_PinNumber = GPIO_PIN_5;
 248:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PinConfig_A>
 24c:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PinConfig_A+0x1>
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	80 83       	st	Z, r24
	PinConfig_A->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 254:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PinConfig_A>
 258:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PinConfig_A+0x1>
 25c:	c1 83       	std	Z+1, r28	; 0x01
	
	PinConfig_A->GPIO_PinNumber = GPIO_PIN_6;
 25e:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PinConfig_A>
 262:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PinConfig_A+0x1>
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	80 83       	st	Z, r24
	PinConfig_A->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 26a:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PinConfig_A>
 26e:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PinConfig_A+0x1>
 272:	c1 83       	std	Z+1, r28	; 0x01
	
	PinConfig_A->GPIO_PinNumber = GPIO_PIN_7;
 274:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PinConfig_A>
 278:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PinConfig_A+0x1>
 27c:	87 e0       	ldi	r24, 0x07	; 7
 27e:	80 83       	st	Z, r24
	PinConfig_A->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 280:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PinConfig_A>
 284:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PinConfig_A+0x1>
 288:	c1 83       	std	Z+1, r28	; 0x01
	
	MCAL_GPIO_Init(GPIOA, PinConfig_A);
 28a:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <PinConfig_A>
 28e:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <PinConfig_A+0x1>
 292:	89 e3       	ldi	r24, 0x39	; 57
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <MCAL_GPIO_Init>
	* LCD_RS -> PORTB.1
	* LCD_RW -> PORTB.2
	* LCD_E  -> PORTB.3
	*/
	
	PinConfig_B->GPIO_PinNumber = GPIO_PIN_1;
 29a:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 29e:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 83       	st	Z, r24
	PinConfig_B->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 2a6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 2aa:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 2ae:	c1 83       	std	Z+1, r28	; 0x01
	
	PinConfig_B->GPIO_PinNumber = GPIO_PIN_2;
 2b0:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 2b4:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 2b8:	c0 83       	st	Z, r28
	PinConfig_B->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 2ba:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 2be:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 2c2:	c1 83       	std	Z+1, r28	; 0x01
	
	PinConfig_B->GPIO_PinNumber = GPIO_PIN_3;
 2c4:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 2c8:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	80 83       	st	Z, r24
	PinConfig_B->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 2d0:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 2d4:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 2d8:	c1 83       	std	Z+1, r28	; 0x01
	
	MCAL_GPIO_Init(GPIOB, PinConfig_B);
 2da:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <__data_end>
 2de:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <__data_end+0x1>
 2e2:	86 e3       	ldi	r24, 0x36	; 54
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <MCAL_GPIO_Init>
	
	LCD_INIT();
 2ea:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_INIT>
	
	LCD_WRITE_STRING("Learn in Depth");
 2ee:	80 e6       	ldi	r24, 0x60	; 96
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_WRITE_STRING>
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <main+0xc6>

000002f8 <MCAL_GPIO_Init>:
 *@param[in]            - PinConfig : pointer to GPIO_PinConfig_t that contains pin/port configuration
 *@retval               - None
 *Note                  - None
 */
void MCAL_GPIO_Init (GPIO_Typedef_t * GPIOx, GPIO_PinConfig_t * PinConfig)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	dc 01       	movw	r26, r24
 2fe:	eb 01       	movw	r28, r22
    switch (PinConfig->GPIO_PinNumber)
 300:	e8 81       	ld	r30, Y
 302:	4e 2f       	mov	r20, r30
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	49 30       	cpi	r20, 0x09	; 9
 308:	51 05       	cpc	r21, r1
 30a:	08 f0       	brcs	.+2      	; 0x30e <MCAL_GPIO_Init+0x16>
 30c:	a7 c1       	rjmp	.+846    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
 30e:	fa 01       	movw	r30, r20
 310:	e6 5d       	subi	r30, 0xD6	; 214
 312:	ff 4f       	sbci	r31, 0xFF	; 255
 314:	0c 94 31 03 	jmp	0x662	; 0x662 <__tablejump2__>
    {   
        case GPIO_PIN_0:
        {
            switch(PinConfig->GPIO_PinMode)
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	91 f0       	breq	.+36     	; 0x342 <MCAL_GPIO_Init+0x4a>
 31e:	18 f0       	brcs	.+6      	; 0x326 <MCAL_GPIO_Init+0x2e>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	e9 f0       	breq	.+58     	; 0x35e <MCAL_GPIO_Init+0x66>
 324:	9b c1       	rjmp	.+822    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            {
                case GPIO_MODE_INPUT_Hiz:
                {
                    GPIOx->DDR.bits.DD0     = 0b0;
 326:	11 96       	adiw	r26, 0x01	; 1
 328:	8c 91       	ld	r24, X
 32a:	11 97       	sbiw	r26, 0x01	; 1
 32c:	8e 7f       	andi	r24, 0xFE	; 254
 32e:	11 96       	adiw	r26, 0x01	; 1
 330:	8c 93       	st	X, r24
 332:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT0  = 0b0;
 334:	12 96       	adiw	r26, 0x02	; 2
 336:	8c 91       	ld	r24, X
 338:	12 97       	sbiw	r26, 0x02	; 2
 33a:	8e 7f       	andi	r24, 0xFE	; 254
 33c:	12 96       	adiw	r26, 0x02	; 2
 33e:	8c 93       	st	X, r24
                    break;
 340:	8d c1       	rjmp	.+794    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_INPUT_PU:
                {
                    GPIOx->DDR.bits.DD0    = 0b0;
 342:	11 96       	adiw	r26, 0x01	; 1
 344:	8c 91       	ld	r24, X
 346:	11 97       	sbiw	r26, 0x01	; 1
 348:	8e 7f       	andi	r24, 0xFE	; 254
 34a:	11 96       	adiw	r26, 0x01	; 1
 34c:	8c 93       	st	X, r24
 34e:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT0  = 0b1;
 350:	12 96       	adiw	r26, 0x02	; 2
 352:	8c 91       	ld	r24, X
 354:	12 97       	sbiw	r26, 0x02	; 2
 356:	81 60       	ori	r24, 0x01	; 1
 358:	12 96       	adiw	r26, 0x02	; 2
 35a:	8c 93       	st	X, r24
                    break;
 35c:	7f c1       	rjmp	.+766    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_OUTPUT_PP:
                {
                    GPIOx->DDR.bits.DD0    = 0b1;
 35e:	11 96       	adiw	r26, 0x01	; 1
 360:	8c 91       	ld	r24, X
 362:	11 97       	sbiw	r26, 0x01	; 1
 364:	81 60       	ori	r24, 0x01	; 1
 366:	11 96       	adiw	r26, 0x01	; 1
 368:	8c 93       	st	X, r24
 36a:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT0   = 0b0;
 36c:	12 96       	adiw	r26, 0x02	; 2
 36e:	8c 91       	ld	r24, X
 370:	12 97       	sbiw	r26, 0x02	; 2
 372:	8e 7f       	andi	r24, 0xFE	; 254
 374:	12 96       	adiw	r26, 0x02	; 2
 376:	8c 93       	st	X, r24
                    break;
 378:	71 c1       	rjmp	.+738    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            }
            break;
        }
        case GPIO_PIN_1:
        {
            switch(PinConfig->GPIO_PinMode)
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	91 f0       	breq	.+36     	; 0x3a4 <MCAL_GPIO_Init+0xac>
 380:	18 f0       	brcs	.+6      	; 0x388 <MCAL_GPIO_Init+0x90>
 382:	82 30       	cpi	r24, 0x02	; 2
 384:	e9 f0       	breq	.+58     	; 0x3c0 <MCAL_GPIO_Init+0xc8>
 386:	6a c1       	rjmp	.+724    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            {
                case GPIO_MODE_INPUT_Hiz:
                {
                    GPIOx->DDR.bits.DD1    = 0b0;
 388:	11 96       	adiw	r26, 0x01	; 1
 38a:	8c 91       	ld	r24, X
 38c:	11 97       	sbiw	r26, 0x01	; 1
 38e:	8d 7f       	andi	r24, 0xFD	; 253
 390:	11 96       	adiw	r26, 0x01	; 1
 392:	8c 93       	st	X, r24
 394:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT1  = 0b0;
 396:	12 96       	adiw	r26, 0x02	; 2
 398:	8c 91       	ld	r24, X
 39a:	12 97       	sbiw	r26, 0x02	; 2
 39c:	8d 7f       	andi	r24, 0xFD	; 253
 39e:	12 96       	adiw	r26, 0x02	; 2
 3a0:	8c 93       	st	X, r24
                    break;
 3a2:	5c c1       	rjmp	.+696    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_INPUT_PU:
                {
                    GPIOx->DDR.bits.DD1    = 0b0;
 3a4:	11 96       	adiw	r26, 0x01	; 1
 3a6:	8c 91       	ld	r24, X
 3a8:	11 97       	sbiw	r26, 0x01	; 1
 3aa:	8d 7f       	andi	r24, 0xFD	; 253
 3ac:	11 96       	adiw	r26, 0x01	; 1
 3ae:	8c 93       	st	X, r24
 3b0:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT1  = 0b1;
 3b2:	12 96       	adiw	r26, 0x02	; 2
 3b4:	8c 91       	ld	r24, X
 3b6:	12 97       	sbiw	r26, 0x02	; 2
 3b8:	82 60       	ori	r24, 0x02	; 2
 3ba:	12 96       	adiw	r26, 0x02	; 2
 3bc:	8c 93       	st	X, r24
                    break;
 3be:	4e c1       	rjmp	.+668    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_OUTPUT_PP:
                {
                    GPIOx->DDR.bits.DD1    = 0b1;
 3c0:	11 96       	adiw	r26, 0x01	; 1
 3c2:	8c 91       	ld	r24, X
 3c4:	11 97       	sbiw	r26, 0x01	; 1
 3c6:	82 60       	ori	r24, 0x02	; 2
 3c8:	11 96       	adiw	r26, 0x01	; 1
 3ca:	8c 93       	st	X, r24
 3cc:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT1  = 0b0;
 3ce:	12 96       	adiw	r26, 0x02	; 2
 3d0:	8c 91       	ld	r24, X
 3d2:	12 97       	sbiw	r26, 0x02	; 2
 3d4:	8d 7f       	andi	r24, 0xFD	; 253
 3d6:	12 96       	adiw	r26, 0x02	; 2
 3d8:	8c 93       	st	X, r24
 3da:	40 c1       	rjmp	.+640    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            }
            break;
        }
        case GPIO_PIN_2:
        {
            switch(PinConfig->GPIO_PinMode)
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	91 f0       	breq	.+36     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3e2:	18 f0       	brcs	.+6      	; 0x3ea <MCAL_GPIO_Init+0xf2>
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	e9 f0       	breq	.+58     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3e8:	39 c1       	rjmp	.+626    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            {
                case GPIO_MODE_INPUT_Hiz:
                {
                    GPIOx->DDR.bits.DD2    = 0b0;
 3ea:	11 96       	adiw	r26, 0x01	; 1
 3ec:	8c 91       	ld	r24, X
 3ee:	11 97       	sbiw	r26, 0x01	; 1
 3f0:	8b 7f       	andi	r24, 0xFB	; 251
 3f2:	11 96       	adiw	r26, 0x01	; 1
 3f4:	8c 93       	st	X, r24
 3f6:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT2  = 0b0;
 3f8:	12 96       	adiw	r26, 0x02	; 2
 3fa:	8c 91       	ld	r24, X
 3fc:	12 97       	sbiw	r26, 0x02	; 2
 3fe:	8b 7f       	andi	r24, 0xFB	; 251
 400:	12 96       	adiw	r26, 0x02	; 2
 402:	8c 93       	st	X, r24
                    break;
 404:	2b c1       	rjmp	.+598    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_INPUT_PU:
                {
                    GPIOx->DDR.bits.DD2    = 0b0;
 406:	11 96       	adiw	r26, 0x01	; 1
 408:	8c 91       	ld	r24, X
 40a:	11 97       	sbiw	r26, 0x01	; 1
 40c:	8b 7f       	andi	r24, 0xFB	; 251
 40e:	11 96       	adiw	r26, 0x01	; 1
 410:	8c 93       	st	X, r24
 412:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT2  = 0b1;
 414:	12 96       	adiw	r26, 0x02	; 2
 416:	8c 91       	ld	r24, X
 418:	12 97       	sbiw	r26, 0x02	; 2
 41a:	84 60       	ori	r24, 0x04	; 4
 41c:	12 96       	adiw	r26, 0x02	; 2
 41e:	8c 93       	st	X, r24
                    break;
 420:	1d c1       	rjmp	.+570    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_OUTPUT_PP:
                    GPIOx->DDR.bits.DD2    = 0b1;
 422:	11 96       	adiw	r26, 0x01	; 1
 424:	8c 91       	ld	r24, X
 426:	11 97       	sbiw	r26, 0x01	; 1
 428:	84 60       	ori	r24, 0x04	; 4
 42a:	11 96       	adiw	r26, 0x01	; 1
 42c:	8c 93       	st	X, r24
 42e:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT2  = 0b0;
 430:	12 96       	adiw	r26, 0x02	; 2
 432:	8c 91       	ld	r24, X
 434:	12 97       	sbiw	r26, 0x02	; 2
 436:	8b 7f       	andi	r24, 0xFB	; 251
 438:	12 96       	adiw	r26, 0x02	; 2
 43a:	8c 93       	st	X, r24
                    break;
 43c:	0f c1       	rjmp	.+542    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            }
            break;
        }
        case GPIO_PIN_3:
        {
            switch(PinConfig->GPIO_PinMode)
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	91 f0       	breq	.+36     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 444:	18 f0       	brcs	.+6      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	e9 f0       	breq	.+58     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 44a:	08 c1       	rjmp	.+528    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            {
                case GPIO_MODE_INPUT_Hiz:
                {
                    GPIOx->DDR.bits.DD3    = 0b0;
 44c:	11 96       	adiw	r26, 0x01	; 1
 44e:	8c 91       	ld	r24, X
 450:	11 97       	sbiw	r26, 0x01	; 1
 452:	87 7f       	andi	r24, 0xF7	; 247
 454:	11 96       	adiw	r26, 0x01	; 1
 456:	8c 93       	st	X, r24
 458:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT3  = 0b0;
 45a:	12 96       	adiw	r26, 0x02	; 2
 45c:	8c 91       	ld	r24, X
 45e:	12 97       	sbiw	r26, 0x02	; 2
 460:	87 7f       	andi	r24, 0xF7	; 247
 462:	12 96       	adiw	r26, 0x02	; 2
 464:	8c 93       	st	X, r24
                    break;
 466:	fa c0       	rjmp	.+500    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_INPUT_PU:
                {
                    GPIOx->DDR.bits.DD3    = 0b0;
 468:	11 96       	adiw	r26, 0x01	; 1
 46a:	8c 91       	ld	r24, X
 46c:	11 97       	sbiw	r26, 0x01	; 1
 46e:	87 7f       	andi	r24, 0xF7	; 247
 470:	11 96       	adiw	r26, 0x01	; 1
 472:	8c 93       	st	X, r24
 474:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT3  = 0b1;
 476:	12 96       	adiw	r26, 0x02	; 2
 478:	8c 91       	ld	r24, X
 47a:	12 97       	sbiw	r26, 0x02	; 2
 47c:	88 60       	ori	r24, 0x08	; 8
 47e:	12 96       	adiw	r26, 0x02	; 2
 480:	8c 93       	st	X, r24
                    break;
 482:	ec c0       	rjmp	.+472    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_OUTPUT_PP:
                    GPIOx->DDR.bits.DD3    = 0b1;
 484:	11 96       	adiw	r26, 0x01	; 1
 486:	8c 91       	ld	r24, X
 488:	11 97       	sbiw	r26, 0x01	; 1
 48a:	88 60       	ori	r24, 0x08	; 8
 48c:	11 96       	adiw	r26, 0x01	; 1
 48e:	8c 93       	st	X, r24
 490:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT3  = 0b0;
 492:	12 96       	adiw	r26, 0x02	; 2
 494:	8c 91       	ld	r24, X
 496:	12 97       	sbiw	r26, 0x02	; 2
 498:	87 7f       	andi	r24, 0xF7	; 247
 49a:	12 96       	adiw	r26, 0x02	; 2
 49c:	8c 93       	st	X, r24
                    break;
 49e:	de c0       	rjmp	.+444    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            }
            break;
        }
        case GPIO_PIN_4:
        {
            switch(PinConfig->GPIO_PinMode)
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	91 f0       	breq	.+36     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4a6:	18 f0       	brcs	.+6      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4a8:	82 30       	cpi	r24, 0x02	; 2
 4aa:	e9 f0       	breq	.+58     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4ac:	d7 c0       	rjmp	.+430    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            {
                case GPIO_MODE_INPUT_Hiz:
                {
                    GPIOx->DDR.bits.DD4    = 0b0;
 4ae:	11 96       	adiw	r26, 0x01	; 1
 4b0:	8c 91       	ld	r24, X
 4b2:	11 97       	sbiw	r26, 0x01	; 1
 4b4:	8f 7e       	andi	r24, 0xEF	; 239
 4b6:	11 96       	adiw	r26, 0x01	; 1
 4b8:	8c 93       	st	X, r24
 4ba:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT4  = 0b0;
 4bc:	12 96       	adiw	r26, 0x02	; 2
 4be:	8c 91       	ld	r24, X
 4c0:	12 97       	sbiw	r26, 0x02	; 2
 4c2:	8f 7e       	andi	r24, 0xEF	; 239
 4c4:	12 96       	adiw	r26, 0x02	; 2
 4c6:	8c 93       	st	X, r24
                    break;
 4c8:	c9 c0       	rjmp	.+402    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_INPUT_PU:
                {
                    GPIOx->DDR.bits.DD4    = 0b0;
 4ca:	11 96       	adiw	r26, 0x01	; 1
 4cc:	8c 91       	ld	r24, X
 4ce:	11 97       	sbiw	r26, 0x01	; 1
 4d0:	8f 7e       	andi	r24, 0xEF	; 239
 4d2:	11 96       	adiw	r26, 0x01	; 1
 4d4:	8c 93       	st	X, r24
 4d6:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT4  = 0b1;
 4d8:	12 96       	adiw	r26, 0x02	; 2
 4da:	8c 91       	ld	r24, X
 4dc:	12 97       	sbiw	r26, 0x02	; 2
 4de:	80 61       	ori	r24, 0x10	; 16
 4e0:	12 96       	adiw	r26, 0x02	; 2
 4e2:	8c 93       	st	X, r24
                    break;
 4e4:	bb c0       	rjmp	.+374    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_OUTPUT_PP:
                    GPIOx->DDR.bits.DD4    = 0b1;
 4e6:	11 96       	adiw	r26, 0x01	; 1
 4e8:	8c 91       	ld	r24, X
 4ea:	11 97       	sbiw	r26, 0x01	; 1
 4ec:	80 61       	ori	r24, 0x10	; 16
 4ee:	11 96       	adiw	r26, 0x01	; 1
 4f0:	8c 93       	st	X, r24
 4f2:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT4  = 0b0;
 4f4:	12 96       	adiw	r26, 0x02	; 2
 4f6:	8c 91       	ld	r24, X
 4f8:	12 97       	sbiw	r26, 0x02	; 2
 4fa:	8f 7e       	andi	r24, 0xEF	; 239
 4fc:	12 96       	adiw	r26, 0x02	; 2
 4fe:	8c 93       	st	X, r24
                    break;
 500:	ad c0       	rjmp	.+346    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            }
            break;
        }
        case GPIO_PIN_5:
        {
            switch(PinConfig->GPIO_PinMode)
 502:	89 81       	ldd	r24, Y+1	; 0x01
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	91 f0       	breq	.+36     	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 508:	18 f0       	brcs	.+6      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	e9 f0       	breq	.+58     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 50e:	a6 c0       	rjmp	.+332    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            {
                case GPIO_MODE_INPUT_Hiz:
                {
                    GPIOx->DDR.bits.DD5    = 0b0;
 510:	11 96       	adiw	r26, 0x01	; 1
 512:	8c 91       	ld	r24, X
 514:	11 97       	sbiw	r26, 0x01	; 1
 516:	8f 7d       	andi	r24, 0xDF	; 223
 518:	11 96       	adiw	r26, 0x01	; 1
 51a:	8c 93       	st	X, r24
 51c:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT5  = 0b0;
 51e:	12 96       	adiw	r26, 0x02	; 2
 520:	8c 91       	ld	r24, X
 522:	12 97       	sbiw	r26, 0x02	; 2
 524:	8f 7d       	andi	r24, 0xDF	; 223
 526:	12 96       	adiw	r26, 0x02	; 2
 528:	8c 93       	st	X, r24
                    break;
 52a:	98 c0       	rjmp	.+304    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_INPUT_PU:
                {
                    GPIOx->DDR.bits.DD5    = 0b0;
 52c:	11 96       	adiw	r26, 0x01	; 1
 52e:	8c 91       	ld	r24, X
 530:	11 97       	sbiw	r26, 0x01	; 1
 532:	8f 7d       	andi	r24, 0xDF	; 223
 534:	11 96       	adiw	r26, 0x01	; 1
 536:	8c 93       	st	X, r24
 538:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT5  = 0b1;
 53a:	12 96       	adiw	r26, 0x02	; 2
 53c:	8c 91       	ld	r24, X
 53e:	12 97       	sbiw	r26, 0x02	; 2
 540:	80 62       	ori	r24, 0x20	; 32
 542:	12 96       	adiw	r26, 0x02	; 2
 544:	8c 93       	st	X, r24
                    break;
 546:	8a c0       	rjmp	.+276    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_OUTPUT_PP:
                    GPIOx->DDR.bits.DD5    = 0b1;
 548:	11 96       	adiw	r26, 0x01	; 1
 54a:	8c 91       	ld	r24, X
 54c:	11 97       	sbiw	r26, 0x01	; 1
 54e:	80 62       	ori	r24, 0x20	; 32
 550:	11 96       	adiw	r26, 0x01	; 1
 552:	8c 93       	st	X, r24
 554:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT5  = 0b0;
 556:	12 96       	adiw	r26, 0x02	; 2
 558:	8c 91       	ld	r24, X
 55a:	12 97       	sbiw	r26, 0x02	; 2
 55c:	8f 7d       	andi	r24, 0xDF	; 223
 55e:	12 96       	adiw	r26, 0x02	; 2
 560:	8c 93       	st	X, r24
                    break;
 562:	7c c0       	rjmp	.+248    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            }
            break;
        }
        case GPIO_PIN_6:
        {
            switch(PinConfig->GPIO_PinMode)
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	91 f0       	breq	.+36     	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 56a:	18 f0       	brcs	.+6      	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
 56c:	82 30       	cpi	r24, 0x02	; 2
 56e:	e9 f0       	breq	.+58     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 570:	75 c0       	rjmp	.+234    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            {
                case GPIO_MODE_INPUT_Hiz:
                {
                    GPIOx->DDR.bits.DD6    = 0b0;
 572:	11 96       	adiw	r26, 0x01	; 1
 574:	8c 91       	ld	r24, X
 576:	11 97       	sbiw	r26, 0x01	; 1
 578:	8f 7b       	andi	r24, 0xBF	; 191
 57a:	11 96       	adiw	r26, 0x01	; 1
 57c:	8c 93       	st	X, r24
 57e:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT6  = 0b0;
 580:	12 96       	adiw	r26, 0x02	; 2
 582:	8c 91       	ld	r24, X
 584:	12 97       	sbiw	r26, 0x02	; 2
 586:	8f 7b       	andi	r24, 0xBF	; 191
 588:	12 96       	adiw	r26, 0x02	; 2
 58a:	8c 93       	st	X, r24
                    break;
 58c:	67 c0       	rjmp	.+206    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_INPUT_PU:
                {
                    GPIOx->DDR.bits.DD6    = 0b0;
 58e:	11 96       	adiw	r26, 0x01	; 1
 590:	8c 91       	ld	r24, X
 592:	11 97       	sbiw	r26, 0x01	; 1
 594:	8f 7b       	andi	r24, 0xBF	; 191
 596:	11 96       	adiw	r26, 0x01	; 1
 598:	8c 93       	st	X, r24
 59a:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT6  = 0b1;
 59c:	12 96       	adiw	r26, 0x02	; 2
 59e:	8c 91       	ld	r24, X
 5a0:	12 97       	sbiw	r26, 0x02	; 2
 5a2:	80 64       	ori	r24, 0x40	; 64
 5a4:	12 96       	adiw	r26, 0x02	; 2
 5a6:	8c 93       	st	X, r24
                    break;
 5a8:	59 c0       	rjmp	.+178    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_OUTPUT_PP:
                    GPIOx->DDR.bits.DD6    = 0b1;
 5aa:	11 96       	adiw	r26, 0x01	; 1
 5ac:	8c 91       	ld	r24, X
 5ae:	11 97       	sbiw	r26, 0x01	; 1
 5b0:	80 64       	ori	r24, 0x40	; 64
 5b2:	11 96       	adiw	r26, 0x01	; 1
 5b4:	8c 93       	st	X, r24
 5b6:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT6  = 0b0;
 5b8:	12 96       	adiw	r26, 0x02	; 2
 5ba:	8c 91       	ld	r24, X
 5bc:	12 97       	sbiw	r26, 0x02	; 2
 5be:	8f 7b       	andi	r24, 0xBF	; 191
 5c0:	12 96       	adiw	r26, 0x02	; 2
 5c2:	8c 93       	st	X, r24
                    break;
 5c4:	4b c0       	rjmp	.+150    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            }
            break;
        }
        case GPIO_PIN_7:
        {
            switch(PinConfig->GPIO_PinMode)
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	81 30       	cpi	r24, 0x01	; 1
 5ca:	91 f0       	breq	.+36     	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
 5cc:	18 f0       	brcs	.+6      	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
 5ce:	82 30       	cpi	r24, 0x02	; 2
 5d0:	e9 f0       	breq	.+58     	; 0x60c <__EEPROM_REGION_LENGTH__+0x20c>
 5d2:	44 c0       	rjmp	.+136    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            {
                case GPIO_MODE_INPUT_Hiz:
                {
                    GPIOx->DDR.bits.DD7    = 0b0;
 5d4:	11 96       	adiw	r26, 0x01	; 1
 5d6:	8c 91       	ld	r24, X
 5d8:	11 97       	sbiw	r26, 0x01	; 1
 5da:	8f 77       	andi	r24, 0x7F	; 127
 5dc:	11 96       	adiw	r26, 0x01	; 1
 5de:	8c 93       	st	X, r24
 5e0:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT7  = 0b0;
 5e2:	12 96       	adiw	r26, 0x02	; 2
 5e4:	8c 91       	ld	r24, X
 5e6:	12 97       	sbiw	r26, 0x02	; 2
 5e8:	8f 77       	andi	r24, 0x7F	; 127
 5ea:	12 96       	adiw	r26, 0x02	; 2
 5ec:	8c 93       	st	X, r24
                    break;
 5ee:	36 c0       	rjmp	.+108    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_INPUT_PU:
                {
                    GPIOx->DDR.bits.DD7    = 0b0;
 5f0:	11 96       	adiw	r26, 0x01	; 1
 5f2:	8c 91       	ld	r24, X
 5f4:	11 97       	sbiw	r26, 0x01	; 1
 5f6:	8f 77       	andi	r24, 0x7F	; 127
 5f8:	11 96       	adiw	r26, 0x01	; 1
 5fa:	8c 93       	st	X, r24
 5fc:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT7  = 0b1;
 5fe:	12 96       	adiw	r26, 0x02	; 2
 600:	8c 91       	ld	r24, X
 602:	12 97       	sbiw	r26, 0x02	; 2
 604:	80 68       	ori	r24, 0x80	; 128
 606:	12 96       	adiw	r26, 0x02	; 2
 608:	8c 93       	st	X, r24
                    break;
 60a:	28 c0       	rjmp	.+80     	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_OUTPUT_PP:
                    GPIOx->DDR.bits.DD7    = 0b1;
 60c:	11 96       	adiw	r26, 0x01	; 1
 60e:	8c 91       	ld	r24, X
 610:	11 97       	sbiw	r26, 0x01	; 1
 612:	80 68       	ori	r24, 0x80	; 128
 614:	11 96       	adiw	r26, 0x01	; 1
 616:	8c 93       	st	X, r24
 618:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.bits.PORT7  = 0b0;
 61a:	12 96       	adiw	r26, 0x02	; 2
 61c:	8c 91       	ld	r24, X
 61e:	12 97       	sbiw	r26, 0x02	; 2
 620:	8f 77       	andi	r24, 0x7F	; 127
 622:	12 96       	adiw	r26, 0x02	; 2
 624:	8c 93       	st	X, r24
                    break;
 626:	1a c0       	rjmp	.+52     	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            }
            break;
        }
        case GPIO_PORT:
        {
            switch(PinConfig->GPIO_PinMode)
 628:	89 81       	ldd	r24, Y+1	; 0x01
 62a:	81 30       	cpi	r24, 0x01	; 1
 62c:	51 f0       	breq	.+20     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
 62e:	18 f0       	brcs	.+6      	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
 630:	82 30       	cpi	r24, 0x02	; 2
 632:	71 f0       	breq	.+28     	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
 634:	13 c0       	rjmp	.+38     	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
            {
                case GPIO_MODE_INPUT_Hiz:
                {
                    GPIOx->DDR.DDR     = 0x00;
 636:	11 96       	adiw	r26, 0x01	; 1
 638:	1c 92       	st	X, r1
 63a:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.PORT    = 0x00;
 63c:	12 96       	adiw	r26, 0x02	; 2
 63e:	1c 92       	st	X, r1
                    break;
 640:	0d c0       	rjmp	.+26     	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_INPUT_PU:
                {
                    GPIOx->DDR.DDR     = 0x00;
 642:	11 96       	adiw	r26, 0x01	; 1
 644:	1c 92       	st	X, r1
 646:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.PORT    = 0xFF;
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	12 96       	adiw	r26, 0x02	; 2
 64c:	8c 93       	st	X, r24
                    break;
 64e:	06 c0       	rjmp	.+12     	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
                }
                case GPIO_MODE_OUTPUT_PP:
                {
                    GPIOx->DDR.DDR     = 0xFF;
 650:	8f ef       	ldi	r24, 0xFF	; 255
 652:	11 96       	adiw	r26, 0x01	; 1
 654:	8c 93       	st	X, r24
 656:	11 97       	sbiw	r26, 0x01	; 1
                    GPIOx->PORT.PORT    = 0x00;
 658:	12 96       	adiw	r26, 0x02	; 2
 65a:	1c 92       	st	X, r1
                }
            }
            break;
        }
    }
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	08 95       	ret

00000662 <__tablejump2__>:
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	05 90       	lpm	r0, Z+
 668:	f4 91       	lpm	r31, Z
 66a:	e0 2d       	mov	r30, r0
 66c:	09 94       	ijmp

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
