
Timer_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000884  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000413  00000000  00000000  00001262  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000272  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001eba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_10>
  2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  74:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Timer_OverFlow_Interrupt_Handler>:
    }
}

void Timer_OverFlow_Interrupt_Handler(void)
{
	counter++;
  7c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  80:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(counter == 3921)
  8e:	81 35       	cpi	r24, 0x51	; 81
  90:	9f 40       	sbci	r25, 0x0F	; 15
  92:	41 f4       	brne	.+16     	; 0xa4 <Timer_OverFlow_Interrupt_Handler+0x28>
	{
		TOGGLE_BIT(PORTB,0);
  94:	98 b3       	in	r25, 0x18	; 24
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	89 27       	eor	r24, r25
  9a:	88 bb       	out	0x18, r24	; 24
		
		counter=0;
  9c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	08 95       	ret

000000a6 <main>:
void Timer_OverFlow_Interrupt_Handler(void);

uint32 counter = 0;

int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <main+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <main+0x8>
  ae:	1f 92       	push	r1
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(DDRB,0);
  b4:	87 b3       	in	r24, 0x17	; 23
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	87 bb       	out	0x17, r24	; 23
	
	MCAL_TIMER0_SetCompareValue(100);
  ba:	84 e6       	ldi	r24, 0x64	; 100
  bc:	0e 94 a8 00 	call	0x150	; 0x150 <MCAL_TIMER0_SetCompareValue>
	
	TIMER0_Config_t TIMER0_Config;
	
	TIMER0_Config.Timer_Mode = TIMER_MODE_CTC;
  c0:	88 e0       	ldi	r24, 0x08	; 8
  c2:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_Config.Clock_Source = TIMER_CLOCK_SOURCE_INTERNAL_PRESCALER_8;
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_Config.IRQ_Enable = TIMER0_IRQ_ENABLE_TOIE0;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	8b 83       	std	Y+3, r24	; 0x03
	TIMER0_Config.P_IRQ_CallBack = Timer_OverFlow_Interrupt_Handler;
  cc:	8e e3       	ldi	r24, 0x3E	; 62
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	9d 83       	std	Y+5, r25	; 0x05
  d2:	8c 83       	std	Y+4, r24	; 0x04
	
	MCAL_TIMER0_Init(&TIMER0_Config);
  d4:	ce 01       	movw	r24, r28
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	0e 94 6f 00 	call	0xde	; 0xde <MCAL_TIMER0_Init>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x36>

000000de <MCAL_TIMER0_Init>:
	{
		OCR0 = Duty_Cycle;
	}
	else if(G_TIMER0_Config_t.Timer_Mode == TIMER_MODE_FAST_PWM_INVERTING)
	{
		OCR0 = (uint8)(255 - Duty_Cycle);
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ec 01       	movw	r28, r24
  e4:	85 e0       	ldi	r24, 0x05	; 5
  e6:	fe 01       	movw	r30, r28
  e8:	a4 e6       	ldi	r26, 0x64	; 100
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	01 90       	ld	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	8a 95       	dec	r24
  f2:	e1 f7       	brne	.-8      	; 0xec <MCAL_TIMER0_Init+0xe>
  f4:	93 b7       	in	r25, 0x33	; 51
  f6:	88 81       	ld	r24, Y
  f8:	89 2b       	or	r24, r25
  fa:	83 bf       	out	0x33, r24	; 51
  fc:	88 81       	ld	r24, Y
  fe:	88 37       	cpi	r24, 0x78	; 120
 100:	11 f0       	breq	.+4      	; 0x106 <MCAL_TIMER0_Init+0x28>
 102:	88 36       	cpi	r24, 0x68	; 104
 104:	19 f4       	brne	.+6      	; 0x10c <MCAL_TIMER0_Init+0x2e>
 106:	87 b3       	in	r24, 0x17	; 23
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	93 b7       	in	r25, 0x33	; 51
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	89 2b       	or	r24, r25
 112:	83 bf       	out	0x33, r24	; 51
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	86 50       	subi	r24, 0x06	; 6
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	18 f4       	brcc	.+6      	; 0x122 <MCAL_TIMER0_Init+0x44>
 11c:	87 b3       	in	r24, 0x17	; 23
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	87 bb       	out	0x17, r24	; 23
 122:	99 b7       	in	r25, 0x39	; 57
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	89 2b       	or	r24, r25
 128:	89 bf       	out	0x39, r24	; 57
 12a:	8a 81       	ldd	r24, Y+2	; 0x02
 12c:	88 23       	and	r24, r24
 12e:	21 f0       	breq	.+8      	; 0x138 <MCAL_TIMER0_Init+0x5a>
 130:	8f b7       	in	r24, 0x3f	; 63
 132:	80 68       	ori	r24, 0x80	; 128
 134:	8f bf       	out	0x3f, r24	; 63
 136:	03 c0       	rjmp	.+6      	; 0x13e <MCAL_TIMER0_Init+0x60>
 138:	8f b7       	in	r24, 0x3f	; 63
 13a:	8f 77       	andi	r24, 0x7F	; 127
 13c:	8f bf       	out	0x3f, r24	; 63
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	9c 81       	ldd	r25, Y+4	; 0x04
 142:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <GP_IRQ_CallBack+0x1>
 146:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <GP_IRQ_CallBack>
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <MCAL_TIMER0_SetCompareValue>:
 150:	8c bf       	out	0x3c, r24	; 60
 152:	08 95       	ret

00000154 <__vector_11>:
	}
}

ISR(TIMER0_OVF_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
	GP_IRQ_CallBack();
 176:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <GP_IRQ_CallBack>
 17a:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <GP_IRQ_CallBack+0x1>
 17e:	09 95       	icall
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	GP_IRQ_CallBack();
 1c4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <GP_IRQ_CallBack>
 1c8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <GP_IRQ_CallBack+0x1>
 1cc:	09 95       	icall
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
